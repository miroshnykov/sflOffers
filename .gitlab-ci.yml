stages:
  - init
# Developer Ticket Build
  - task deploy
  - task quality
# Developer Ticket Merging into Dev
  - dev deploy
  - dev quality
# Dev Branch Merging into Master
  - master merge
  - master build
  - master tag
# Master Branch or Image Release
  - master image

Base:
  stage: init
  script:
    - RELEASE=`date +%s`
    - echo RELEASE to be built is $RELEASE
    - echo RELEASE="$RELEASE" >> $CI_PROJECT_DIR/variables.env
  artifacts:
    reports:
      dotenv: variables.env
  except:
    - tags

# ###################################################################################################################
# Task Deploy: Developer task/branch is manually deployed onto a stagin env.
# ###################################################################################################################
 
Stage1:
  image: docker:latest
  # Official docker image.
  stage: task deploy
  services:
    - docker:dind
  before_script:
    -  echo "Deploying to QA Server 1"
  script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE":$RELEASE . 
    - docker push  "$CI_REGISTRY_IMAGE":$RELEASE   
  when: manual
  allow_failure: false
  except:
    - master
    - tags

Stage2:
  image: docker:latest
  # Official docker image.
  stage: task deploy
  services:
    - docker:dind
  before_script:
    -  echo "Deploying to QA Server 2"
  script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE":$RELEASE . 
    - docker push  "$CI_REGISTRY_IMAGE":$RELEASE   
  when: manual
  allow_failure: false
  except:
    - master
    - tags

# ###################################################################################################################
# QA Task Passed: QA approves developer task/branch and merge to dev
# QA Task Rejected: QA rejects developer task/branch
# ###################################################################################################################
QA Stage1:
  stage: task quality
  script:
    - echo "QA Approve the build, proceed to merge into Dev."    
    # 1. Send notification to user that QA passed his branch.
    # 2. Update jira ticket that test passed? 
  when: manual
  needs:
    - Stage1
  except:
    - master
    - tags

QA Stage2:
  stage: task quality
  script:
    - echo "QA Approve the build, proceed to merge into Dev."    
    # 1. Send notification to user that QA passed his branch.
    # 2. Update jira ticket that test passed? 
  when: manual
  needs:
    - Stage2
  except:
    - master
    - tags


QA Task Rejected:
  stage: task quality
  script:
    - echo "QA Rejected the build, it will not be merged into Dev."   
    - exit 1
    # 1. Send notification to user that QA rejected his branch.
    # 2. Update jira ticket that test failed? 
  when: manual
  except:
    - master  
    - tags
# ###################################################################################################################
# Dev Deploy: Build & Deploy dev branch after merge onto a server automatically
# #################################################################################################################

Dev Deploy:
  stage: dev deploy
  script:
    - echo "Deploy dev branch"    
    # 1. Send notification to user that QA passed his branch.
    # 2. Update jira ticket that test passed? 
  needs: [QA Task Passed]
  except:
    - master
    - tags

# ###################################################################################################################
# QA Dev Passed: QA approves dev build
# QA Dev Rejected: QA approves dev build
# ###################################################################################################################

QA Dev Passed:
  stage: dev quality
  script:
    - echo "QA Approve the build, proceed to merge into Dev."    
    # 1. Send notification to user that QA passed his branch.
    # 2. Update jira ticket that test passed? 
  when: manual
  except:
    - master
    - tags

QA Dev Rejected:
  stage: dev quality
  script:
    - echo "QA Rejected the build, it will not be merged into Dev."   
    - exit 1
    # 1. Send notification to user that QA rejected his branch.
    # 2. Update jira ticket that test failed? 
  when: manual
  except:
    - master  
    - tags

# ###################################################################################################################
# Dev Branch Merge Master: Merge into Master branch once approval from QA passed
# ###################################################################################################################
Dev Branch Merge Master:
  stage: master merge
  script:
    - echo "Merging into master branch"    
    # 1. Send notification to user that QA passed his branch.
    # 2. Update jira ticket that test passed? 
  needs: [QA Dev Passed]
  except:
    - master
    - tags

# ###################################################################################################################
# Build Master: Build Master once changed are merged
# Tag Master: Tag build for reference
# Deploy Image: Deploy to Producction manually.
# ###################################################################################################################

Build Master:
  # Official docker image.
  image: docker:latest
  stage: master build
  services:
    - docker:dind
  before_script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE":$RELEASE . 
    - docker push  "$CI_REGISTRY_IMAGE":$RELEASE
  only:
    - master

Tag Master:
  stage: master tag
  before_script:
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - >-
      curl --request POST --header 
      "PRIVATE-TOKEN: $GITLAB_ACCESS" 
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/repository/tags?tag_name=$RELEASE&ref=master"
  only:
    - master
  
Deploy Image:
  stage: master image
  before_script:
  - IPS=`printenv | grep  "SFL_MANAGER*" | grep "=.*" | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`
  - MANAGER=`echo $IPS | xargs shuf -n1 -e`
  - echo "$MANAGER"
  # - apt update && apt-get install git openssh-client -y
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh/deployer && touch ~/.ssh/deployer/id_rsa
  - echo "$DEPLOYER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/deployer/id_rsa && chmod 600 ~/.ssh/deployer/id_rsa
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh -o "StrictHostKeyChecking no" -i "~/.ssh/deployer/id_rsa" deployer@$MANAGER "sudo salt-call --retcode-passthrough --hard-crash state.sls smartFlowRotator.container_deploy_gitlab cache=false pillar='{\"stack\":\"$CI_PROJECT_TITLE\",\"service\":\"$CI_PROJECT_TITLE\", \"release\":\"$RELEASE\" }'"
  after_script:
    - docker system prune -af
    - rm -rf ~/.ssh/deployer/id_rsa
  only:
    - master

     
 

